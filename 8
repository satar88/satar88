//Prims Algorithm
1. #include <stdio.h> 
2. #include <limits.h> 
3. #define vertices 5 
4. 
5. int minimum_key(int k[], int mst[]) 
6. { 
7. int minimum = INT_MAX, min,i; 
8. 
9. for (i = 0; i < vertices; i++) 
10. if (mst[i] == 0 && k[i] < minimum ) 
11. minimum = k[i], min = i; 
12. 
13. return min; 
14. } 
15. 
16. 
17. void prim(int g[vertices][vertices]) 
18. { 
19. int parent[vertices]; 
20. int k[vertices]; 
21. int mst[vertices]; 
22. int i, count,u,v; 
23. for (i = 0; i < vertices; i++) 
24. k[i] = INT_MAX, mst[i] = 0; 
25. 
26. k[0] = 0; 
27. parent[0] = -1; 
28. 
29. for (count = 0; count < vertices-1; count++) 
30. { 
31. 
32. u = minimum_key(k, mst); 
33. mst[u] = 1; 
34. 
35. for (v = 0; v < vertices; v++) 
36. 
37. if (g[u][v] && mst[v] == 0 && g[u][v] < k[v]) 
38. parent[v] = u, k[v] = g[u][v]; 
39. } 
40. 
41. for (i = 1; i < vertices; i++) 
42. printf("%d %d %d \n", parent[i], i, g[i][parent[i]]); 
43. } 
44. 
45. 
46. void main() 
47. { 
48. int g[vertices][vertices] = {{3, 2, 1, 9, 0}, 
49. {5, 1, 2, 10, 4}, 
50. {0, 4, 1, 0, 9}, 
51. {8, 10, 0, 2, 10}, 
52. {1, 6, 8, 11, 0}, 
53. }; 
54. 
55. prim(g); 
56. } 
Output
0 1 5 
0 2 0 
0 3 8 
1 4 6
//Kruskals Algorithm
1. #include <iostream> 
2. #include <vector> 
3. #include <utility> 
4. #include <algorithm> 
5. using namespace std; 
6. const int MAX = 1e4 + 5; 
7. int id[MAX], nodes, edges; 
8. pair <long long, pair<int, int> > p[MAX]; 
9. 
10. void init() 
11. { 
12. for(int i = 0;i < MAX;++i) 
13. id[i] = i; 
14. } 
15. 
16. int root(int x) 
17. { 
18. while(id[x] != x) 
19. { 
20. id[x] = id[id[x]]; 
21. x = id[x]; 
22. } 
23. return x; 
24. } 
25. 
26. void union1(int x, int y) 
27. { 
28. int p = root(x); 
29. int q = root(y); 
30. id[p] = id[q]; 
31. } 
32. 
33. long long kruskal(pair<long long, pair<int, int> > p[]) 
34. { 
35. int x, y; 
36. long long cost, minimumCost = 0; 
37. for(int i = 0;i < edges;++i) 
38. { 
39. x = p[i].second.first; 
40. y = p[i].second.second; 
41. cost = p[i].first; 
42. if(root(x) != root(y)) 
43. { 
44. minimumCost += cost; 
45. union1(x, y); 
46. } 
47. } 
48. return minimumCost; 
49. }
50. 
51. int main() 
52. { 
53. int x, y; 
54. long long weight, cost, minimumCost; 
55. init(); 
56. cout <<"Enter Nodes and edges"; 
57. cin >> nodes >> edges; 
58. for(int i = 0;i < edges;++i) 
59. { 
60. cout<<"Enter the value of X, Y and edges"; 
61. cin >> x >> y >> weight; 
62. p[i] = make_pair(weight, make_pair(x, y)); 
63. } 
64. sort(p, p + edges); 
65. minimumCost = kruskal(p); 
66. cout <<"Minimum cost is "<< minimumCost << endl; 
67. return 0; 
68. } 
Output
Enter Nodes and edges5
5
Enter the value of X, Y and edges5 
4
3
Enter the value of X, Y and edges2
3
1
Enter the value of X, Y and edges1
2
3
Enter the value of X, Y and edges5
4
3
Enter the value of X, Y and edges2
